import{_ as i,c as a,a2 as n,o as h}from"./chunks/framework.BeuUUHFt.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2.JS/3.工具函数/数组操作.md","filePath":"2.JS/3.工具函数/数组操作.md","lastUpdated":1731997977000}'),l={name:"2.JS/3.工具函数/数组操作.md"};function k(t,s,p,e,B,r){return h(),a("div",null,s[0]||(s[0]=[n(`<h2 id="过滤空值" tabindex="-1">过滤空值 <a class="header-anchor" href="#过滤空值" aria-label="Permalink to &quot;过滤空值&quot;">​</a></h2><p>在 JavaScript 中，有一些值被认为是 <code>false</code>，也就是在条件语句中被视为 false 值，这些值包括：</p><ul><li><code>false</code></li><li><code>0</code> （数字零）</li><li><code>&quot;&quot;</code> （空字符串）</li><li><code>null</code></li><li><code>undefined</code></li><li><code>NaN</code>（非数值）</li></ul><p>除了上述值，其他所有值都被视为 <code>true</code></p><p>Boolean函数可以判断是true和false，直接把该函数传给filter，就可以快速过滤空值</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">Boolean</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="判断是否是数组" tabindex="-1">判断是否是数组 <a class="header-anchor" href="#判断是否是数组" aria-label="Permalink to &quot;判断是否是数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">isArray</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="字符串数组转数字数组" tabindex="-1">字符串数组转数字数组 <a class="header-anchor" href="#字符串数组转数字数组" aria-label="Permalink to &quot;字符串数组转数字数组&quot;">​</a></h2><p>Number函数可以将字符串转换成数字，直接把该函数传给map，就可以快速把字符串数组转数字数组</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">Number</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="对树形数组根据某一属性进行过滤" tabindex="-1">对树形数组根据某一属性进行过滤 <a class="header-anchor" href="#对树形数组根据某一属性进行过滤" aria-label="Permalink to &quot;对树形数组根据某一属性进行过滤&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 递归过滤节点，生成新的树结构</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> {Node[]}</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> nodes</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 要过滤的节点</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> {node =&gt; boolean}</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> predicate</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 过滤条件，符合条件的节点保留</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 过滤后的节点</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> deal</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nodes</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> predicate</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果已经没有节点了，结束递归</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">nodes</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> nodes</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> newChildren</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> of</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> nodes</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">predicate</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 如果节点符合条件，直接加入新的节点集</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">            newChildren</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">            node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> deal</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> predicate</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 如果当前节点不符合条件，递归过滤子节点，</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 把符合条件的子节点提升上来，并入新节点集</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">            newChildren</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">deal</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> predicate</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> newChildren</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> deal</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> node</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">resName</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">includes</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="树结构数组转扁平数组" tabindex="-1">树结构数组转扁平数组 <a class="header-anchor" href="#树结构数组转扁平数组" aria-label="Permalink to &quot;树结构数组转扁平数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> treeToArray</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> [];</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> recursiveFunction</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">      arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">children</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">        recursiveFunction</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">  recursiveFunction</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="为每个节点添加id字段" tabindex="-1">为每个节点添加id字段 <a class="header-anchor" href="#为每个节点添加id字段" aria-label="Permalink to &quot;为每个节点添加id字段&quot;">​</a></h2><p>数组</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> addIdField</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nodes</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> parentId</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">            nodes</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> currentId</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> parentId</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">parentId</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">              node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> currentId</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">Children</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">                addIdField</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">Children</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> currentId</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">              }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> nodes</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">          };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>对象</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> addIdToTree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tree</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">            const</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> addIdToNode</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> parentId</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> id</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> parentId</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> parentId</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;,&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> newNode</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">Children</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">Children</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">                newNode</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">Children</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> node</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">Children</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">child</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> addIdToNode</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">child</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">              }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">              return</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> newNode</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">            };</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> addIdToNode</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">tree</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">          }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,20)]))}const y=i(l,[["render",k]]);export{F as __pageData,y as default};

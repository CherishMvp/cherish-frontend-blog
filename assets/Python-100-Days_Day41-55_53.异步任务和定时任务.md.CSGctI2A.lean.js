import{_ as e,c as t,a2 as r,o}from"./chunks/framework.BeuUUHFt.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python-100-Days/Day41-55/53.异步任务和定时任务.md","filePath":"Python-100-Days/Day41-55/53.异步任务和定时任务.md","lastUpdated":1731997977000}'),n={name:"Python-100-Days/Day41-55/53.异步任务和定时任务.md"};function s(l,a,i,d,c,h){return o(),t("div",null,a[0]||(a[0]=[r('<h2 id="异步任务和定时任务" tabindex="-1">异步任务和定时任务 <a class="header-anchor" href="#异步任务和定时任务" aria-label="Permalink to &quot;异步任务和定时任务&quot;">​</a></h2><p>在Web应用中，如果一个请求执行了耗时间的操作或者该请求的执行时间无法确定，而且对于用户来说只需要知道服务器接收了他的请求，并不需要马上得到请求的执行结果，这样的操作我们就应该对其进行异步化处理。如果说<strong>使用缓存是优化网站性能的第一要义</strong>，那么将耗时间或执行时间不确定的任务<strong>异步化则是网站性能优化的第二要义</strong>，简单的说就是<strong>能推迟做的事情都不要马上做</strong>。</p><p>上一章节中讲到的发短信和上传文件到云存储为例，这两个操作前者属于时间不确定的操作（因为作为调用者，我们不能确定三方平台响应的时间），后者属于耗时间的操作（如果文件较大或者三方平台不稳定，都可能导致上传的时间较长），很显然，这两个操作都可以做异步化处理。</p><p>在Python项目中实现异步化处理可以使用多线程或借助三方库Celery来完成。</p><h3 id="使用celery实现异步化" tabindex="-1">使用Celery实现异步化 <a class="header-anchor" href="#使用celery实现异步化" aria-label="Permalink to &quot;使用Celery实现异步化&quot;">​</a></h3><h3 id="使用多线程实现异步化" tabindex="-1">使用多线程实现异步化 <a class="header-anchor" href="#使用多线程实现异步化" aria-label="Permalink to &quot;使用多线程实现异步化&quot;">​</a></h3>',6)]))}const y=e(n,[["render",s]]);export{p as __pageData,y as default};

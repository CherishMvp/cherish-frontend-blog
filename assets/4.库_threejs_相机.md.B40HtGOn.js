import{_ as i,c as a,a2 as n,o as e}from"./chunks/framework.BeuUUHFt.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"4.库/threejs/相机.md","filePath":"4.库/threejs/相机.md","lastUpdated":1731997977000}'),t={name:"4.库/threejs/相机.md"};function h(p,s,l,k,r,B){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="updateprojectionmatrix" tabindex="-1"><code>updateProjectionMatrix</code> <a class="header-anchor" href="#updateprojectionmatrix" aria-label="Permalink to &quot;\`updateProjectionMatrix\`&quot;">​</a></h2><p>更新透视投影矩阵<code>.updateProjectionMatrix()</code></p><p>在Three.js内部，渲染期间，透视投影矩阵threejs并不会始终读取相机的参数，计算，这样太浪费CPU计算资源了，为了性能考虑，threejs默认就是计算一次生成投影矩阵的值，所以如果你因为某种需要，改变了相机的相关参数，就要执行<code>.updateProjectionMatrix()</code>告诉threejs重新合成透视投影矩阵的值<code>.projectionMatrix</code>。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// onresize 事件会在窗口被调整大小时发生</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">onresize</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 重置渲染器输出画布canvas尺寸</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    renderer</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">setSize</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">innerWidth</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">innerHeight</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    camera</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">aspect</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">innerWidth</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">innerHeight</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    camera</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">updateProjectionMatrix</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,4)]))}const F=i(t,[["render",h]]);export{o as __pageData,F as default};

import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.BeuUUHFt.js";const B=JSON.parse('{"title":"JQL","description":"","frontmatter":{},"headers":[],"relativePath":"3.框架/3.uniCloud/4.JQL语法.md","filePath":"3.框架/3.uniCloud/4.JQL语法.md","lastUpdated":1731997977000}'),e={name:"3.框架/3.uniCloud/4.JQL语法.md"};function t(h,s,p,r,d,k){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="jql" tabindex="-1">JQL <a class="header-anchor" href="#jql" aria-label="Permalink to &quot;JQL&quot;">​</a></h1><p><code>JQL</code>，全称 javascript query language，是一种js方式操作数据库的规范</p><ul><li><code>JQL</code>大幅降低了js工程师操作数据库的难度，比SQL和传统MongoDB API更清晰、易掌握</li><li><code>JQL</code>支持强大的<a href="https://uniapp.dcloud.net.cn/uniCloud/schema" target="_blank" rel="noreferrer">DB Schema</a>，内置数据规则和权限。DB Schema 支持<a href="https://uniapp.dcloud.net.cn/uniCloud/uni-id-summary" target="_blank" rel="noreferrer">uni-id</a>，可直接使用其角色和权限。无需再开发各种数据合法性校验和鉴权代码。</li><li><code>JQL</code>利用json数据库的嵌套特点，极大的简化了联表查询和树查询的复杂度，并支持更加灵活的虚拟表。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 查询表</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">db</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">collection</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;tableImages&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="新增数据" tabindex="-1">新增数据 <a class="header-anchor" href="#新增数据" aria-label="Permalink to &quot;新增数据&quot;">​</a></h3><p>获取到db的表对象后，通过add方法新增数据记录</p><h2 id="云函数传统方式和jql语法操作数据库的区别" tabindex="-1">云函数传统方式和jql语法操作数据库的区别 <a class="header-anchor" href="#云函数传统方式和jql语法操作数据库的区别" aria-label="Permalink to &quot;云函数传统方式和jql语法操作数据库的区别&quot;">​</a></h2><ul><li>主要查询方式上的区别，传统方式使用db.command，而jql使用js语法更易读更简洁</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> dbCmd</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">command</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> myOpenID</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;xxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> res</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> db</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">collection</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;articles&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">  quarter</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> dbCmd</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">eq</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;2020 Q2&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="hbuilderx的jql数据库管理器" tabindex="-1">HBuilderX的JQL数据库管理器 <a class="header-anchor" href="#hbuilderx的jql数据库管理器" aria-label="Permalink to &quot;HBuilderX的JQL数据库管理器&quot;">​</a></h2><p>为方便开发者调试查询语句，<code>HBuilderX 3.1.5</code>起内置了JQL查询调试器。用法如下</p><ol><li>在<code>uniCloud/database</code>目录右键选择<code>新建JQL数据库管理</code>（HBuilderX创建项目时勾选uniCloud会自带一个jql文件，直接使用自带的jql文件也可以）</li><li>在jql文件内写上自己的语句</li><li>使用工具栏上的运行按钮运行（快捷键：Ctrl+R 或 F5）即可</li></ol><p><strong>注意</strong></p><ul><li>编写clientDB的js API（也支持常规js语法，比如var），可以对云数据库进行增删改查操作。不支持uniCloud-db组件写法</li><li>可以全部运行，也可以选中部分代码运行。点击工具栏上的运行按钮或者按下【F5】键运行代码</li><li>如果文档中存在多条JQL语句，只有最后一条语句生效</li><li>如果混写了普通js，最后一条语句需是数据库操作语句</li><li>此处代码运行不受DB Schema的权限控制，移植代码到实际业务中注意在schema中配好permission</li><li>不支持clientDB的action</li><li>数据库查询有最大返回条数限制，详见：[limit(opens new window)](</li></ul>`,14)]))}const c=i(e,[["render",t]]);export{B as __pageData,c as default};

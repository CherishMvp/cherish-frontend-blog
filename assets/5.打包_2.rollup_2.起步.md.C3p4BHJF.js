import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BeuUUHFt.js";const o=JSON.parse('{"title":"rollup","description":"","frontmatter":{},"headers":[],"relativePath":"5.打包/2.rollup/2.起步.md","filePath":"5.打包/2.rollup/2.起步.md","lastUpdated":1731997977000}'),p={name:"5.打包/2.rollup/2.起步.md"};function e(t,s,h,r,k,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="rollup" tabindex="-1">rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;rollup&quot;">​</a></h1><blockquote><p>rollup是下一代JavaScript模块打包工具。开发者可以在你的应用或库中使用ES2015模块，然后高效地将它们打包成一个单一文件用于浏览器和node.js使用</p><p>相比其他JavaScript打包工具，rollup总能打出更小，更快的包</p><p>这时因为rollup基于ES2015模块，比webpack和browserify使用的commonJS模块机制更高效。这也让rollup从模块中删除无用的代码，即tree-shaking变得更容易</p></blockquote><h2 id="tree-shaking" tabindex="-1">Tree-shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;Tree-shaking&quot;">​</a></h2><p>这个特点，是Rollup最初推出时的一大特点。Rollup通过对代码的静态分析，分析出冗余代码，在最终的打包文件中将这些冗余代码删除掉，进一步缩小代码体积。这是目前大部分构建工具所不具备的特点(Webpack 2.0+已经支持了，但是有开发者认为并没有Rollup做得干净)</p><h2 id="es2015模块打包支持" tabindex="-1">ES2015模块打包支持 <a class="header-anchor" href="#es2015模块打包支持" aria-label="Permalink to &quot;ES2015模块打包支持&quot;">​</a></h2><p>这个也是其他构建工具所不具备的。Rollup不需要通过babel将import转化成Commonjs的require方式，极大地利用ES2015模块的优势</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>全局安装更易使用</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> rollup</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>新建src文件夹，其下新建index.js,执行打包命令</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">rollup</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> src/index.js</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> dist/bundle.js</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> es</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>-i指定打包的入口文件，-i是--input的缩写</p></li><li><p>src/index.js是-i的参数，即被指定的打包的入口文件</p></li><li><p>-o指定输出的文件，是--output.file或--file的缩写(如果没有这个参数，则直接输出到控制台)</p></li><li><p>dist/bundle.js是-o的参数，即输出文件</p></li><li><p>-f指定打包文件的格式，-f是--format的缩写</p></li><li><p>es是-f的参数，表示打包文件使用ES6模块规范</p></li></ul><h2 id="打包格式" tabindex="-1">打包格式 <a class="header-anchor" href="#打包格式" aria-label="Permalink to &quot;打包格式&quot;">​</a></h2><p>rollup支持的打包文件的格式有</p><ul><li><p>amd</p></li><li><p>cjs</p></li><li><p>es\\esm,</p></li><li><p>iife, umd</p></li></ul><p>amd为AMD标准，cjs为CommonJS标准，esm\\es为ES模块标准，iife为立即调用函数， umd同时支持amd、cjs和iife</p><h2 id="rollup-config-js" tabindex="-1">rollup.config.js <a class="header-anchor" href="#rollup-config-js" aria-label="Permalink to &quot;rollup.config.js&quot;">​</a></h2><p>rollup配置文件，项目根目录下创建</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">  input</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;./src/index.js&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 入口文件路径</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出文件名及文件格式</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      file</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;./dist/my-lib-umd.js&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      format</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;umd&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //当入口文件有export时，&#39;umd&#39;格式必须指定name</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;myLib&#39;</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //这样，在通过&lt;script&gt;标签引入时，才能通过name访问到export的内容</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      file</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;./dist/my-lib-es.js&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      format</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;es&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      file</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;./dist/my-lib-cjs.js&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      format</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;cjs&#39;</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // CJS是CommonJS的缩写</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="修改script字段" tabindex="-1">修改script字段 <a class="header-anchor" href="#修改script字段" aria-label="Permalink to &quot;修改script字段&quot;">​</a></h2><p>生成默认package.json</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>package.json添加以下内容</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">: { </span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    &quot;dev1&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;rollup -c&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    &quot;dev2&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&quot;rollup -c my.config.js&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    &quot;dev3&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&quot;rollup -wc&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>scripts表示node脚本</li><li>-c表示执行编译， 默认使用rollup.config.js</li><li>-c后面接js文件，表示使用自定义的配置文件，my.config.js</li><li>c参数表示执行编译，w参数表示监听文件状态，即在文件修改后自动重新编译</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#执行脚本</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> dev1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> dev2</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> dev3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,27)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};

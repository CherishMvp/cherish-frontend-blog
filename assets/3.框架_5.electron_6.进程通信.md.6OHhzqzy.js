import{_ as i,c as a,a2 as n,o as e}from"./chunks/framework.BeuUUHFt.js";const B=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"3.框架/5.electron/6.进程通信.md","filePath":"3.框架/5.electron/6.进程通信.md","lastUpdated":1731997977000}'),p={name:"3.框架/5.electron/6.进程通信.md"};function l(t,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><blockquote><p>Electron中有两个进程，分别是<code>Main</code>主进程和<code>Renderer</code>渲染进程。两个进程间有多种方法进行通信</p></blockquote><h2 id="主进程和渲染进程" tabindex="-1">主进程和渲染进程 <a class="header-anchor" href="#主进程和渲染进程" aria-label="Permalink to &quot;主进程和渲染进程&quot;">​</a></h2><p>main.js在启动应用后就创建了一个主进程main process，它可以通过electron中的一些模块直接与原生GUI（在你的应用窗口）交互</p><h2 id="渲染进程renderer" tabindex="-1">渲染进程<code>Renderer</code> <a class="header-anchor" href="#渲染进程renderer" aria-label="Permalink to &quot;渲染进程\`Renderer\`&quot;">​</a></h2><p>仅启动主进程并不能给你的应用创建应用窗口。窗口是通过main文件里的主进程调用叫<code>BrowserWindow</code>的模块创建的。每个页面都是运行在自己的进程里，这些进程我们称之为渲染进程。渲染进程会在窗口中渲染出web页面（引用了CSS，JavaScript，图片等的HTML文件）。web页面是Chromium渲染的，因为各系统下标准是统一的的，所以兼容性很好</p><h2 id="ipc" tabindex="-1"><code>ipc</code> <a class="header-anchor" href="#ipc" aria-label="Permalink to &quot;\`ipc\`&quot;">​</a></h2><ul><li><code>ipcMain</code>模块</li><li><code>ipcRenderer</code>模块</li></ul><h2 id="ipcmain" tabindex="-1">ipcMain <a class="header-anchor" href="#ipcmain" aria-label="Permalink to &quot;ipcMain&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">ipcMain</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;electron&quot;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">ipcMain</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&quot;fixed-app&quot;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">    setAlwaysOnTop</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">setAlwaysOnTop</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    win</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">setAlwaysOnTop</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">setAlwaysOnTop</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="ipcrenderer" tabindex="-1">ipcRenderer <a class="header-anchor" href="#ipcrenderer" aria-label="Permalink to &quot;ipcRenderer&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">ipcRenderer</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;electron&quot;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> fixedApp</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">  ipcRenderer</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&quot;fixed-app&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,12)]))}const c=i(p,[["render",l]]);export{B as __pageData,c as default};

import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.BeuUUHFt.js";const c=JSON.parse('{"title":"打包格式","description":"","frontmatter":{},"headers":[],"relativePath":"5.打包/2.rollup/4.打包格式.md","filePath":"5.打包/2.rollup/4.打包格式.md","lastUpdated":1731997977000}'),l={name:"5.打包/2.rollup/4.打包格式.md"};function t(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="打包格式" tabindex="-1">打包格式 <a class="header-anchor" href="#打包格式" aria-label="Permalink to &quot;打包格式&quot;">​</a></h1><h2 id="rollup输出格式" tabindex="-1">rollup输出格式 <a class="header-anchor" href="#rollup输出格式" aria-label="Permalink to &quot;rollup输出格式&quot;">​</a></h2><p>rollup支持的打包输出格式：</p><ul><li>es,</li><li>amd</li><li>cjs</li><li>iife</li><li>umd</li><li>system</li></ul><h2 id="cjs-commonjs" tabindex="-1">cjs/CommonJs <a class="header-anchor" href="#cjs-commonjs" aria-label="Permalink to &quot;cjs/CommonJs&quot;">​</a></h2><blockquote><p>一种 JavaScript 语言的模块化规范，它通常会在服务端的 Nodejs 上使用。项目是由多个模块组成的，使用 <code>require(&quot;module&quot;)</code> 读取并加载模块</p><p>在 CommonJs 的模块化规范中，每一个文件就是一个模块，拥有自己独立的作用域、变量、以及方法等，对其他的模块都不可见。CommonJS规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性<code>module.exports</code>是对外的接口。加载某个模块，其实是加载该模块的<code>module.exports</code>属性。<code>require</code>方法用于加载模块</p><p>缺点：不能在浏览器中直接运行，执行后才能拿到依赖信息，由于用户可以动态 require（例如 <a href="https://link.zhihu.com/?target=https%3A//cdn.jsdelivr.net/npm/react%4017.0.1/index.js" target="_blank" rel="noreferrer">react 根据开发和生产环境导出不同代码</a> 的写法），无法做到提前分析依赖以及 <a href="https://link.zhihu.com/?target=https%3A//rollupjs.org/guide/zh/%23tree-shaking" target="_blank" rel="noreferrer">Tree-Shaking</a></p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//moudle-a.js</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">moudle</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//moudle-b.js</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> ma </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;./moudle-a&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> ma</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">    b</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>模块化规范给项目带来极大的好处，在业务复杂，模块众多的大型项目中，开发者都遵循相同的规则来开发各自的模块，他们通过规范来约束模块的定义，大家不需要太多的沟通或者大量的文档来说明自己的模块使用规则，成千上万的模块就这样生产，并能够容易的使用。它的意义不仅是让模块看起来很规范，在合作开发、社区中传播中也起到了重大的作用</p><h2 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h2><blockquote><p>通用模块定义规范（Common Module Definiton），它是类似于 <a href="https://www.jianshu.com/p/7bdba4dfa7e5" target="_blank" rel="noreferrer">CommonJs</a> 模块化规范，但是运行于浏览器之上的</p><p>CMD 规范尽量保持简单，并与 CommonJS 的 Modules 规范保持了很大的兼容性。通过 CMD 规范书写的模块，可以很容易在 Node.js 中运行。在 CMD 规范中，一个模块就是一个文件</p></blockquote><p>格式如下：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">factory</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>具体用法如下：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// moudle-a.js</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">require</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> exports</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> module</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    module</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">        a</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// moudle-b.js</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">require</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> exports</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> module</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> ma</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;./moudle-a&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> ma</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">    module</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">        b</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>CMD 规范拥有简单、异步加载脚本、友好的调试并且兼容 Nodejs，它的确在开发过程中给我们提供了较好的模块管理方式</p><h2 id="amd" tabindex="-1">AMD <a class="header-anchor" href="#amd" aria-label="Permalink to &quot;AMD&quot;">​</a></h2><blockquote><p>异步模块定义规范（Asynchronous Module Definition），它是 <a href="https://www.jianshu.com/p/7bdba4dfa7e5" target="_blank" rel="noreferrer">CommonJs</a> 模块化规范的超集，但是运行于浏览器之上的，AMD 的特点就和它的名字一样，模块的加载过程是异步的，它大大的利用了浏览器的并发请求能力，让模块的依赖过程的阻塞变得更少了。requireJs 就是 AMD 模块化规范的实现</p></blockquote><p>AMD 作为一个规范，只需定义其语法 API，而不关心其实现。AMD 规范简单到只有一个 API，即 define 函数：</p><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(id</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">, dependencies</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">factory</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>具体用法如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// moudle-a.js</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;moudleA&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">() { </span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">        a</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// moudle-b.js</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;moudleA&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ma</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> ma</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">        b</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> b</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><blockquote><p>通用模块定义规范（Universal Module Definition）。也是随着大前端的趋势所诞生，它可以通过运行时或者编译时让同一个代码模块在使用 CommonJs、CMD 甚至是 AMD 的项目中运行。未来同一个 JavaScript 包运行在浏览器端、服务区端甚至是 APP 端都只需要遵守同一个写法就行了</p><p>它没有自己专有的规范，是集结了 CommonJs、CMD、AMD 的规范于一身</p></blockquote><h2 id="esm" tabindex="-1">ESM <a class="header-anchor" href="#esm" aria-label="Permalink to &quot;ESM&quot;">​</a></h2><blockquote><p>ECMAScript Module，现在最流行的模块方案，使用 <code>import</code> <code>export</code> 来管理依赖。由于它们只能写在所有表达式外面，所以打包器可以轻易做到分析依赖以及 Tree-Shaking。当然他也支持动态加载（<code>import()</code>）。</p><p>浏览器直接通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 即可使用该写法。NodeJS 可以通过使用 mjs 后缀或者在 package.json 添加 <code>&quot;type&quot;: &quot;module&quot;</code> 来使用，注意他还有一些 <a href="https://link.zhihu.com/?target=https%3A//nodejs.org/api/esm.html%23esm_experimental_json_modules" target="_blank" rel="noreferrer">实验性的功能</a> 没有正式开启。考虑到大量 cjs 库没有支持，如果要发布 esm 版的库还是通过 rollup 打包一下比较好（同时相关依赖可以放到 devDependencies 里）</p></blockquote><h2 id="iife" tabindex="-1">IIFE <a class="header-anchor" href="#iife" aria-label="Permalink to &quot;IIFE&quot;">​</a></h2><p><a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Glossary/IIFE" target="_blank" rel="noreferrer">Immediately Invoked Function Expression</a>，只是一种写法，可以隐藏一些局部变量，可以用来代替 UMD 作为纯粹给前端使用的写法</p><h2 id="systemjs" tabindex="-1">systemjs <a class="header-anchor" href="#systemjs" aria-label="Permalink to &quot;systemjs&quot;">​</a></h2><blockquote><p>systemjs 是一个最小系统加载工具，用来创建插件来处理可替代的场景加载过程，包括加载 CSS 场景和图片，主要运行在浏览器和 NodeJS 中。它是 ES6 浏览器加载程序的的扩展，将应用在本地浏览器中。通常创建的插件名称是模块本身，要是没有特意指定用途，则默认插件名是模块的扩展名称 缺点：版本兼容性差，对开发者体验不好</p></blockquote><h2 id="格式选择" tabindex="-1">格式选择 <a class="header-anchor" href="#格式选择" aria-label="Permalink to &quot;格式选择&quot;">​</a></h2><h3 id="只支持-nodejs-的-require-写法" tabindex="-1">只支持 NodeJS 的 require 写法 <a class="header-anchor" href="#只支持-nodejs-的-require-写法" aria-label="Permalink to &quot;只支持 NodeJS 的 require 写法&quot;">​</a></h3><p>package.json：<code>&quot;main&quot;: &quot;index.js&quot;</code></p><p>其中 index.js 使用 cjs 写法（<code>module.exports = xxx;</code>）</p><h3 id="只支持-nodejs-的-import-写法" tabindex="-1">只支持 NodeJS 的 import 写法 <a class="header-anchor" href="#只支持-nodejs-的-import-写法" aria-label="Permalink to &quot;只支持 NodeJS 的 import 写法&quot;">​</a></h3><p>package.json：<code>&quot;main&quot;: &quot;index.mjs&quot;</code> 或 <code>&quot;type&quot;: &quot;module&quot;, &quot;main&quot;: &quot;index.js&quot;</code></p><p>其中 index.mjs 或 index.js 使用 esm 写法（<code>export default xxx</code>）</p><h3 id="同时支持-nodejs-的-require-和-import-写法" tabindex="-1">同时支持 NodeJS 的 require 和 import 写法 <a class="header-anchor" href="#同时支持-nodejs-的-require-和-import-写法" aria-label="Permalink to &quot;同时支持 NodeJS 的 require 和 import 写法&quot;">​</a></h3><p>利用 <a href="https://link.zhihu.com/?target=https%3A//nodejs.org/docs/latest-v15.x/api/packages.html%23packages_conditional_exports" target="_blank" rel="noreferrer">条件 export</a>，直接看文档里面有例子。</p><h3 id="支持浏览器直接通过-script-引入的写法" tabindex="-1">支持浏览器直接通过 <code>&lt;script&gt;</code> 引入的写法 <a class="header-anchor" href="#支持浏览器直接通过-script-引入的写法" aria-label="Permalink to &quot;支持浏览器直接通过 \`&lt;script&gt;\` 引入的写法&quot;">​</a></h3><p>package.json：<code>&quot;browser&quot;: &quot;index.global.js&quot;</code>，然后 jsDelivr 等 cdn 会自动使用这个文件，具体到 cdn 上还有 <code>&quot;jsdelivr&quot;: &quot;index.jsdelivr.js&quot;</code> 等配置写法，权重更高。</p><p>这里可以试试 <a href="https://link.zhihu.com/?target=https%3A//esbuild.github.io/getting-started/%23bundling-for-the-browser" target="_blank" rel="noreferrer">esbuild</a> 输出 iife 格式的包，比 webpack/babel 更快，除了对 cjs 的库不太友好（可以配合下面 rollup/commonjs 插件使用）。</p><p>浏览器直接支持 <code>type=&quot;module&quot;</code> 引入 esm 写法的文件，但是这对于 cdn 来说并不友好：cdn 看到 <code>import &quot;xxx&quot;</code> 并不知道如何找到 xxx 模块，所以这种写法建议只在本地使用。另外也可以通过 vite，让它使用 rollup 和 esbuild 帮你引入这些外部模块。</p><h3 id="支持现代打包器-rollup-和-webpack2-通过-import-引入的写法" tabindex="-1">支持现代打包器 rollup 和 webpack2+ 通过 import 引入的写法 <a class="header-anchor" href="#支持现代打包器-rollup-和-webpack2-通过-import-引入的写法" aria-label="Permalink to &quot;支持现代打包器 rollup 和 webpack2+ 通过 import 引入的写法&quot;">​</a></h3><p>package.json：<code>&quot;module&quot;: &quot;index.esm.js&quot;</code></p><p>如果某些库没有写这个选项，那么可以借助 rollup 的 commonjs 插件转译到可用，具体做法可以参考 rollup 文档</p><h2 id="浏览器支持" tabindex="-1">浏览器支持 <a class="header-anchor" href="#浏览器支持" aria-label="Permalink to &quot;浏览器支持&quot;">​</a></h2><h3 id="浏览器格式" tabindex="-1">浏览器格式 <a class="header-anchor" href="#浏览器格式" aria-label="Permalink to &quot;浏览器格式&quot;">​</a></h3><ul><li>浏览器不支持<code>require</code>，即<code>commonjs</code></li><li>浏览器也不支持<code>import</code>，即<code>esm</code></li></ul><h3 id="babel对import和require的处理" tabindex="-1">babel对import和require的处理 <a class="header-anchor" href="#babel对import和require的处理" aria-label="Permalink to &quot;babel对import和require的处理&quot;">​</a></h3><ul><li><code>babel</code>对<code>require</code>是不做处理的，就加了一个严格模式</li><li><code>babel</code>会对<code>import</code>进行处理，转化为<code>commonjs</code>规范。<code>export default</code> 被转换成 <code>exports[&quot;default&quot;]</code>，同时还加了一个标记变量 <code>__esModule</code> 来描述这个 <code>exports</code> 是由 <code>es6 export</code> 转换过来的</li></ul><h3 id="webpack是如何处理import和require" tabindex="-1">webpack是如何处理import和require <a class="header-anchor" href="#webpack是如何处理import和require" aria-label="Permalink to &quot;webpack是如何处理import和require&quot;">​</a></h3><p>虽然 <code>babel</code> 将 <code>import</code> 转换成 <code>CommonJS</code>规范形式的，但是浏览器本身没有 <code>module</code> <code>export</code> <code>require</code> <code>global</code> 这些变量，并没有原生的支持<code>CommonJS</code>规范，所以需要一些库来做这些支持</p><p>在<code>webpack</code>打包中就会有一套自己的<code>loader</code>专门来处理这些</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>1、浏览器不支持<code>import</code>和<code>require</code> 2、<code>babel</code>会将<code>esModule</code>规范转化成<code>commonjs</code>规范 3、<code>webpack、gulp</code>以及其他构建工具会对<code>commonjs</code>进行处理，使之支持浏览器环境</p>`,55)]))}const B=i(l,[["render",t]]);export{c as __pageData,B as default};

import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.BeuUUHFt.js";const c=JSON.parse('{"title":"sExpress使用JWT","description":"","frontmatter":{},"headers":[],"relativePath":"3.框架/4.express/3.jwt.md","filePath":"3.框架/4.express/3.jwt.md","lastUpdated":1731997977000}'),t={name:"3.框架/4.express/3.jwt.md"};function l(p,s,r,h,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="sexpress使用jwt" tabindex="-1">sExpress使用JWT <a class="header-anchor" href="#sexpress使用jwt" aria-label="Permalink to &quot;sExpress使用JWT&quot;">​</a></h1><blockquote><p>JWT属于token机制的一种</p></blockquote><h2 id="安装jwt" tabindex="-1">安装JWT <a class="header-anchor" href="#安装jwt" aria-label="Permalink to &quot;安装JWT&quot;">​</a></h2><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> jsonwebtoken</span><span style="--shiki-light:#9DB1C5;--shiki-dark:#98C379;"> express-jwt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>jsonwebtoken</code>用于生成JWT字符串</li><li><code>express-jwt</code>用于将JWT字符串解析还原成JSON对象</li></ul><h2 id="导入jwt相关包" tabindex="-1">导入JWT相关包 <a class="header-anchor" href="#导入jwt相关包" aria-label="Permalink to &quot;导入JWT相关包&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> jwt</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;jsonwebtoken&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> expressJWT</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;express-jwt&#39;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="定义secret密钥" tabindex="-1">定义secret密钥 <a class="header-anchor" href="#定义secret密钥" aria-label="Permalink to &quot;定义secret密钥&quot;">​</a></h2><p>为了保证JWT字符串的安全性，防止JWT字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的secret密钥：</p><ol><li>当生成JWT字符串的时候，需要使用secret密钥对用户的信息进行加密，最终得到加密好的JWT字符串</li><li>当把JWT字符串解析还原成JSON对象的时候，需要使用secret密钥进行解密</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// secretKey 密钥的本质就是一个字符串</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> secretKet</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;zhuzhuxia&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="生成jwt字符串" tabindex="-1">生成JWT字符串 <a class="header-anchor" href="#生成jwt字符串" aria-label="Permalink to &quot;生成JWT字符串&quot;">​</a></h2><p>调用<code>jsonwebtoken</code>包提供的<code>sign()</code>方法，将用户的信息加密成JWT字符串，发送给客户端：</p><ul><li>参数一，用户的信息对象</li><li>参数二，加密的密钥</li><li>参数三，配置对象，可以配置当前token的有效期</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">jwt</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">sign</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">username</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> userinfo</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">username</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> }</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> secretKet</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">expiresIn</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &quot;30s&quot;</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="jwt还原成json" tabindex="-1">JWT还原成JSON <a class="header-anchor" href="#jwt还原成json" aria-label="Permalink to &quot;JWT还原成JSON&quot;">​</a></h2><p>客户端每次在访问那些有权限的接口的时候，都需要主动通过<code>请求头</code>中的<code>Authorization</code>字段，将Token字符串发送到服务器进行身份验证</p><p>此时，服务器可以通过express-jwt这个中间件，自动将客户端发送过来的Token解析还原成JSON对象</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,19)]))}const B=i(t,[["render",l]]);export{c as __pageData,B as default};

import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BeuUUHFt.js";const F=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"1.基础/6.算法/1.基础.md","filePath":"1.基础/6.算法/1.基础.md","lastUpdated":1731997977000}'),t={name:"1.基础/6.算法/1.基础.md"};function h(k,s,p,e,r,B){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h1><h2 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-label="Permalink to &quot;二分查找&quot;">​</a></h2><blockquote><p>二分查找的基本思想是将n个元素分成大致相等的两部分，取arr[n/2]中间值与x做比较，如果x=arr[n/2]，则找到x，算法结束；如果x&lt;arr[n/2]，则只要在数组arr的左半部分继续查找x；如果x&gt;arr[n/2]，则只要在数组arr的右半部分查找x</p><p>arr是所要查找的数组，x是要查找的元素</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 二分查找</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> arr</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 查找的数组</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 查找的元素</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#F97583;--shiki-light-font-style:inherit;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@returns</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 查找到返回数组下标，否则返回-1</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> binarySearch</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> low</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 首下标</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> high</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 尾下标</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 只要查找区间起始点和结束点中间还有值(要包括两值相同的情况)，就继续进行查找</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">low</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> high</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> mid</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">low</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> high</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 确定中间值下标</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //如果查找值等于中间值</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">mid</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> mid</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 则这个mid值，就是查找到的数组下标</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //如果查找值小于中间值</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> arr</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">mid</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">]) {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      high</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> mid</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 则在左半部分查找，需要重新确认区间high的位置</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 否则查找值大于中间值</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">      low</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> mid</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 则在右半部分查找，需要重新确认区间low的位置</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //没有查找到，返回-1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#F8F8F8;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">binarySearch</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#B392F0;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="时间复杂度与空间复杂度" tabindex="-1">时间复杂度与空间复杂度 <a class="header-anchor" href="#时间复杂度与空间复杂度" aria-label="Permalink to &quot;时间复杂度与空间复杂度&quot;">​</a></h2><p><strong>时间复杂度</strong>并不具体表示代码<strong>真正的执行时间</strong>，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>，简称<strong>时间复杂度</strong></p><blockquote><p>时间复杂度与空间复杂度：</p><p><a href="https://blog.csdn.net/weixin_39565332/article/details/110868780" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_39565332/article/details/110868780</a></p><p>markdown数学公式：</p><p><a href="https://blog.csdn.net/qq_43713303/article/details/105711878" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_43713303/article/details/105711878</a></p><p>递归的时间复杂度：</p><p><a href="https://blog.csdn.net/wtlll/article/details/124164149" target="_blank" rel="noreferrer">https://blog.csdn.net/wtlll/article/details/124164149</a></p></blockquote><p>$$ 一层for循环时间复杂度O(n) $$</p><p>$$</p><p>二层for循环时间复杂度 O(n^2) $$</p>`,10)]))}const g=i(t,[["render",h]]);export{F as __pageData,g as default};

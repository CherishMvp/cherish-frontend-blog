import{_ as n,c as e,a2 as s,o as p}from"./chunks/framework.BeuUUHFt.js";const h=JSON.parse('{"title":"pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"3.框架/wujie微前端/pnpm-workspace.md","filePath":"3.框架/wujie微前端/pnpm-workspace.md","lastUpdated":1731997977000}'),o={name:"3.框架/wujie微前端/pnpm-workspace.md"};function i(l,a,r,t,c,d){return p(),e("div",null,a[0]||(a[0]=[s(`<h1 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h1><p>快速、节省磁盘空间的包管理器</p><h2 id="motivation-项目初衷" tabindex="-1">Motivation 项目初衷 <a class="header-anchor" href="#motivation-项目初衷" aria-label="Permalink to &quot;Motivation 项目初衷&quot;">​</a></h2><h3 id="saving-disk-space-节省磁盘空间" tabindex="-1"><a href="https://pnpm.io/motivation#saving-disk-space" target="_blank" rel="noreferrer">Saving disk space</a> 节省磁盘空间 <a class="header-anchor" href="#saving-disk-space-节省磁盘空间" aria-label="Permalink to &quot;[Saving disk space](https://pnpm.io/motivation#saving-disk-space) 节省磁盘空间&quot;">​</a></h3><p>使用 npm 时，如果有 100 个项目使用依赖项，则会在磁盘上保存该依赖项的 100 个副本。使用 pnpm，依赖项将存储在内容可寻址存储中，因此：</p><ol><li>如果依赖于不同版本的依赖项，则只会将不同的文件添加到存储中。例如，如果它有 100 个文件，而新版本仅在其中一个文件中发生了更改，则只会将 1 个新文件添加到存储中， <code>pnpm update</code> 而不是仅为了单个更改而克隆整个依赖项。</li><li>所有文件都保存在磁盘上的一个位置。安装软件包时，其文件将从该位置硬链接，不占用额外的磁盘空间。这允许您跨项目共享相同版本的依赖项。</li></ol><p>因此，您可以在磁盘上节省大量与项目和依赖项数量成正比的空间，并且安装速度更快！</p><h3 id="boosting-installation-speed-提高安装速度" tabindex="-1"><a href="https://pnpm.io/motivation#boosting-installation-speed" target="_blank" rel="noreferrer">Boosting installation speed</a> 提高安装速度 <a class="header-anchor" href="#boosting-installation-speed-提高安装速度" aria-label="Permalink to &quot;[Boosting installation speed](https://pnpm.io/motivation#boosting-installation-speed) 提高安装速度&quot;">​</a></h3><p>PNPM 性能安装分三个阶段进行：</p><ol><li>依赖项解析。标识所有必需的依赖项并将其提取到存储。</li><li>目录结构计算。 <code>node_modules</code> 目录结构是根据依赖项计算的。</li><li>链接依赖项。所有剩余的依赖项都将从存储区获取并硬链接到 <code>node_modules</code> 。</li></ol><p>此方法比解析、获取和写入所有依赖项的传统三阶段安装过程要快得多 <code>node_modules</code> 。</p><h2 id="monorepo-是什么" tabindex="-1">monorepo 是什么 <a class="header-anchor" href="#monorepo-是什么" aria-label="Permalink to &quot;monorepo 是什么&quot;">​</a></h2><p>monorepo 是把多个项目的所有代码放到一个 git 仓库中进行管理，多个项目中会有共享的代码则可以分包引用。整个项目就是有 root 管理的 dependencies 加上多个 packages，每个 package 也可以在自己的作用域引入自己的 dependencies</p><p>项目结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>├── node_modules</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── packages</span></span>
<span class="line"><span>│   ├── ui</span></span>
<span class="line"><span>│   ├── utils</span></span>
<span class="line"><span>│   └── web</span></span>
<span class="line"><span>├── pnpm-lock.yaml</span></span>
<span class="line"><span>├── pnpm-workspace.yaml</span></span>
<span class="line"><span>├── readme.md</span></span>
<span class="line"><span>└── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>packages 文件夹中的就是原本每个独立的项目(下文称之为 package )了，现在放在一起用 workspace 去管理。最外层路径称之为 root。在 root package.json 中的 deps 是所有子 package 共用的</p><h2 id="pnpm-是什么" tabindex="-1">pnpm 是什么 <a class="header-anchor" href="#pnpm-是什么" aria-label="Permalink to &quot;pnpm 是什么&quot;">​</a></h2><p>pnpm 是新一代 node 包管理器。它由 npm/yarn 衍生而来，但却解决了 npm/yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景</p><p>pnpm 相比 yarn，npm，yarn 安装包更快速，对包的依赖管理更偏平，对磁盘占用也有优势</p><h2 id="为什么要使用-monorepo" tabindex="-1">为什么要使用 monorepo <a class="header-anchor" href="#为什么要使用-monorepo" aria-label="Permalink to &quot;为什么要使用 monorepo&quot;">​</a></h2><p>使用 monorepo 可以把原本一个项目的多个模块拆分成多个 packages，在 packages 之间相互引用，也可以单独发布成包，极大地解决了项目之间代码无法重用的痛点。在项目打包或者编译操作时也可重用一套配置，通吃所有 packages。</p>`,21)]))}const b=n(o,[["render",i]]);export{h as __pageData,b as default};

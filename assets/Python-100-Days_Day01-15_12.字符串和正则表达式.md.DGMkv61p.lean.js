import{_ as l,c as t,a2 as n,j as s,a as i,o as p}from"./chunks/framework.BeuUUHFt.js";const h="/cherish-frontend-blog/assets/tel-start-number.C6BS3z2S.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python-100-Days/Day01-15/12.字符串和正则表达式.md","filePath":"Python-100-Days/Day01-15/12.字符串和正则表达式.md","lastUpdated":1731997977000}'),B={name:"Python-100-Days/Day01-15/12.字符串和正则表达式.md"};function e(k,a,r,d,F,g){return p(),t("div",null,a[0]||(a[0]=[n('<h2 id="使用正则表达式" tabindex="-1">使用正则表达式 <a class="header-anchor" href="#使用正则表达式" aria-label="Permalink to &quot;使用正则表达式&quot;">​</a></h2><h3 id="正则表达式相关知识" tabindex="-1">正则表达式相关知识 <a class="header-anchor" href="#正则表达式相关知识" aria-label="Permalink to &quot;正则表达式相关知识&quot;">​</a></h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noreferrer">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p>',5),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"符号"),s("th",null,"解释"),s("th",null,"示例"),s("th",null,"说明")])]),s("tbody",null,[s("tr",null,[s("td",null,"."),s("td",null,"匹配任意字符"),s("td",null,"b.t"),s("td",null,"可以匹配bat / but / b#t / b1t等")]),s("tr",null,[s("td",null,"\\w"),s("td",null,"匹配字母/数字/下划线"),s("td",null,"b\\wt"),s("td",null,[i("可以匹配bat / b1t / b_t等"),s("br"),i("但不能匹配b#t")])]),s("tr",null,[s("td",null,"\\s"),s("td",null,"匹配空白字符（包括\\r、\\n、\\t等）"),s("td",null,"love\\syou"),s("td",null,"可以匹配love you")]),s("tr",null,[s("td",null,"\\d"),s("td",null,"匹配数字"),s("td",null,"\\d\\d"),s("td",null,"可以匹配01 / 23 / 99等")]),s("tr",null,[s("td",null,"\\b"),s("td",null,"匹配单词的边界"),s("td",null,"\\bThe\\b"),s("td")]),s("tr",null,[s("td",null,"^"),s("td",null,"匹配字符串的开始"),s("td",null,"^The"),s("td",null,"可以匹配The开头的字符串")]),s("tr",null,[s("td",null,"$"),s("td",null,"匹配字符串的结束"),s("td",null,".exe$"),s("td",null,"可以匹配.exe结尾的字符串")]),s("tr",null,[s("td",null,"\\W"),s("td",null,"匹配非字母/数字/下划线"),s("td",null,"b\\Wt"),s("td",null,[i("可以匹配b#t / b@t等"),s("br"),i("但不能匹配but / b1t / b_t等")])]),s("tr",null,[s("td",null,"\\S"),s("td",null,"匹配非空白字符"),s("td",null,"love\\Syou"),s("td",null,[i("可以匹配love#you等"),s("br"),i("但不能匹配love you")])]),s("tr",null,[s("td",null,"\\D"),s("td",null,"匹配非数字"),s("td",null,"\\d\\D"),s("td",null,"可以匹配9a / 3# / 0F等")]),s("tr",null,[s("td",null,"\\B"),s("td",null,"匹配非单词边界"),s("td",null,"\\Bio\\B"),s("td")]),s("tr",null,[s("td",null,"[]"),s("td",null,"匹配来自字符集的任意单一字符"),s("td",null,"[aeiou]"),s("td",null,"可以匹配任一元音字母字符")]),s("tr",null,[s("td",null,"[^]"),s("td",null,"匹配不在字符集中的任意单一字符"),s("td",null,"[^aeiou]"),s("td",null,"可以匹配任一非元音字母字符")]),s("tr",null,[s("td",null,"*"),s("td",null,"匹配0次或多次"),s("td",null,"\\w*"),s("td")]),s("tr",null,[s("td",null,"+"),s("td",null,"匹配1次或多次"),s("td",null,"\\w+"),s("td")]),s("tr",null,[s("td",null,"?"),s("td",null,"匹配0次或1次"),s("td",null,"\\w?"),s("td")]),s("tr",null,[s("td",{N:""}),s("td",null,"匹配N次"),s("td",{3:""},"\\w"),s("td")]),s("tr",null,[s("td",{"M,":""}),s("td",null,"匹配至少M次"),s("td",{"3,":""},"\\w"),s("td")]),s("tr",null,[s("td",{"M,N":""}),s("td",null,"匹配至少M次至多N次"),s("td",{"3,6":""},"\\w"),s("td")]),s("tr",null,[s("td",null,"|"),s("td",null,"分支"),s("td",null,"foo|bar"),s("td",null,"可以匹配foo或者bar")]),s("tr",null,[s("td",null,"(?#)"),s("td",null,"注释"),s("td"),s("td")]),s("tr",null,[s("td",null,"(exp)"),s("td",null,"匹配exp并捕获到自动命名的组中"),s("td"),s("td")]),s("tr",null,[s("td",null,"(?<name>exp)"),s("td",null,"匹配exp并捕获到名为name的组中"),s("td"),s("td")]),s("tr",null,[s("td",null,"(?:exp)"),s("td",null,"匹配exp但是不捕获匹配的文本"),s("td"),s("td")]),s("tr",null,[s("td",null,"(?=exp)"),s("td",null,"匹配exp前面的位置"),s("td",null,"\\b\\w+(?=ing)"),s("td",null,"可以匹配I'm dancing中的danc")]),s("tr",null,[s("td",null,"(?<=exp)"),s("td",null,"匹配exp后面的位置"),s("td",null,"(?<=\\bdanc)\\w+\\b"),s("td",null,"可以匹配I love dancing and reading中的第一个ing")]),s("tr",null,[s("td",null,"(?!exp)"),s("td",null,"匹配后面不是exp的位置"),s("td"),s("td")]),s("tr",null,[s("td",null,"(?<!exp)"),s("td",null,"匹配前面不是exp的位置"),s("td"),s("td")]),s("tr",null,[s("td",null,"*?"),s("td",null,"重复任意次，但尽可能少重复"),s("td",null,[i("a.*b"),s("br"),i("a.*?b")]),s("td",null,"将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串")]),s("tr",null,[s("td",null,"+?"),s("td",null,"重复1次或多次，但尽可能少重复"),s("td"),s("td")]),s("tr",null,[s("td",null,"??"),s("td",null,"重复0次或1次，但尽可能少重复"),s("td"),s("td")]),s("tr",null,[s("td",null,"{M,N}?"),s("td",null,"重复M到N次，但尽可能少重复"),s("td"),s("td")]),s("tr",null,[s("td",null,"{M,}?"),s("td",null,"重复M次以上，但尽可能少重复"),s("td"),s("td")])])],-1),n(`<blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\\进行转义处理，例如想匹配小数点可以写成\\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\\(和\\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="python对正则表达式的支持" tabindex="-1">Python对正则表达式的支持 <a class="header-anchor" href="#python对正则表达式的支持" aria-label="Permalink to &quot;Python对正则表达式的支持&quot;">​</a></h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags=0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。" tabindex="-1">例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。 <a class="header-anchor" href="#例子1-验证输入用户名和qq号是否有效并给出对应的提示信息。" aria-label="Permalink to &quot;例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。&quot;">​</a></h4><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#98C379;">验证输入用户名和QQ号是否有效并给出对应的提示信息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#98C379;">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    username </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;"> input</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;请输入用户名: &#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    qq </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;"> input</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;请输入QQ号: &#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # match函数的第一个参数是正则表达式字符串或正则表达式对象</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 第二个参数是要跟正则表达式做匹配的字符串对象</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    m1 </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">^</span><span style="--shiki-light:#FFAB70;--shiki-dark:#D19A66;">[0-9a-zA-Z_]</span><span style="--shiki-light:#F97583;--shiki-dark:#D19A66;">{6,20}</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">$</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">, username)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> m1</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;请输入有效的用户名.&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    m2 </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">^</span><span style="--shiki-light:#FFAB70;--shiki-dark:#D19A66;">[1-9]</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">\\d</span><span style="--shiki-light:#F97583;--shiki-dark:#D19A66;">{4,11}</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">$</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">, qq)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> m2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;请输入有效的QQ号.&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> m1 </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> m2</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;你输入的信息是有效的!&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;__main__&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">    main</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\\\，例如表示数字的\\d得书写成\\\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2-从一段文字中提取出国内手机号码。" tabindex="-1">例子2：从一段文字中提取出国内手机号码。 <a class="header-anchor" href="#例子2-从一段文字中提取出国内手机号码。" aria-label="Permalink to &quot;例子2：从一段文字中提取出国内手机号码。&quot;">​</a></h4><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="`+h+`" alt=""></p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    pattern </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">compile</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">(?&lt;=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">\\D</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">1</span><span style="--shiki-light:#FFAB70;--shiki-dark:#D19A66;">[34578]</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">\\d</span><span style="--shiki-light:#F97583;--shiki-dark:#D19A66;">{9}</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">(?=</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;">\\D</span><span style="--shiki-light:#F97583;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    sentence </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 查找所有匹配并保存到一个列表中</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    mylist </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">findall</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(pattern, sentence)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(mylist)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;--------华丽的分隔线--------&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 通过迭代器取出匹配对象并获得匹配的内容</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> temp </span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> pattern</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">finditer</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(sentence):</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(temp.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;--------华丽的分隔线--------&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 通过search函数指定搜索位置找出所有匹配</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    m </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> pattern</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">search</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(sentence)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> m</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(m.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">        m </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> pattern</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">search</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(sentence, m.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;__main__&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">    main</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\\D)(1[38]\\d{9}|14[57]\\d{8}|15[0-35-9]\\d{8}|17[678]\\d{8})(?=\\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3-替换字符串中的不良内容" tabindex="-1">例子3：替换字符串中的不良内容 <a class="header-anchor" href="#例子3-替换字符串中的不良内容" aria-label="Permalink to &quot;例子3：替换字符串中的不良内容&quot;">​</a></h4><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    sentence </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;你丫是傻叉吗? 我操你大爷的. Fuck you.&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    purified </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">sub</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">                      &#39;*&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">, sentence, </span><span style="--shiki-light:#BBBBBB;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">flags</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">re.</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#D19A66;">IGNORECASE</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(purified)</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 你丫是*吗? 我*你大爷的. * you.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;__main__&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">    main</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5" target="_blank" rel="noreferrer">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4-拆分长字符串" tabindex="-1">例子4：拆分长字符串 <a class="header-anchor" href="#例子4-拆分长字符串" aria-label="Permalink to &quot;例子4：拆分长字符串&quot;">​</a></h4><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes min-dark one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    poem </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">    sentence_list </span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> re</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#FFAB70;--shiki-dark:#D19A66;">[，。, .]</span><span style="--shiki-light:#FFAB70;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">, poem)</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;"> sentence_list</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#ABB2BF;">        sentence_list</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">(sentence_list)</span><span style="--shiki-light:#6B737C;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # [&#39;窗前明月光&#39;, &#39;疑是地上霜&#39;, &#39;举头望明月&#39;, &#39;低头思故乡&#39;]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#79B8FF;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#F97583;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#FFAB70;--shiki-dark:#98C379;"> &#39;__main__&#39;</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#61AFEF;">    main</span><span style="--shiki-light:#BBBBBB;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="后话" tabindex="-1">后话 <a class="header-anchor" href="#后话" aria-label="Permalink to &quot;后话&quot;">​</a></h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noreferrer">Beautiful Soup</a>或<a href="http://lxml.de/" target="_blank" rel="noreferrer">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。</p>`,21)]))}const c=l(B,[["render",e]]);export{y as __pageData,c as default};
